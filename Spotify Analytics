# For this project, I downloaded Spotify data from Kaggle.
# Then I created a table to insert Spotify data into.
# Finally, I performed analytics on the data using SQL. 

CREATE TABLE BIT_DB.Spotifydata (
id integer PRIMARY KEY,
artist_name varchar NOT NULL,
track_name varchar NOT NULL,
track_id varchar NOT NULL,
popularity integer NOT NULL,
danceability decimal(4,3) NOT NULL,
energy decimal(4,3) NOT NULL,
song_key integer NOT NULL,
loudness decimal(5,3) NOT NULL,
song_mode integer NOT NULL,
speechiness decimal(5,4) NOT NULL,
acousticness decimal(6,5) NOT NULL,
instrumentalness text NOT NULL,
liveness decimal(5,4) NOT NULL,
valence decimal(4,3) NOT NULL,
tempo decimal(6,3) NOT NULL,
duration_ms integer NOT NULL,
time_signature integer NOT NULL );

SELECT* FROM BIT_DB.Spotifydata;

#What is the average danceability by artist and track?
SELECT artist_name, track_name, AVG(danceability)
FROM BIT_DB.Spotifydata
WHERE danceability >0.5
group by artist_name
ORDER BY danceability DESC;

#Who are the Top 10 Artist based by popularity
SELECT artist_name as Top_10_Popular_Artist, popularity 
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY popularity DESC
LIMIT 10;

#Who are the Bottom 10 Artist based by popularity
SELECT artist_name as Bottom_10_Least_Popular_Artist, popularity 
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY popularity ASC
LIMIT 10;

#What artist released the longest song?
SELECT distinct artist_name, track_name, SUM(duration_ms/60000) as Song_Length_Minutes
FROM BIT_DB.Spotifydata
Group BY track_name
Order by song_length_minutes desc
LIMIT 1;

#What's the average danceability for the 10 most popular songs?
SELECT artist_name, track_name, popularity, AVG(danceability) as Avg_Danceability
FROM BIT_DB.Spotifydata
GROUP BY track_name
ORDER BY popularity desc
LIMIT 10;

#Which artist have the most energenic songs?
SELECT artist_name, track_name, ROUND(avg(energy*100)) as Avg_Energy_Percentage
FROM BIT_DB.Spotifydata
GROUP BY artist_name
ORDER BY energy desc
LIMIT 10;
